name: 🛡️ Bulletproof Mobile Build with Strict Result Validation

# نظام بناء مقاوم للأخطاء مع فحص صارم لكل نتيجة
on:
  push:
    branches: [ main, develop, test-*, fix-* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GRADLE_VERSION: 8.14.3
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
  ENABLE_ADVANCED_DIAGNOSTICS: true
  # متغير للتحكم في مستوى الصرامة في فحص النتائج
  STRICT_VALIDATION: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # ═══════════════════════════════════════════════════════════════
    # المرحلة الأولى: إعداد البيئة مع فحص صارم
    # ═══════════════════════════════════════════════════════════════
    
    - name: 📥 Checkout with Validation
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    # فحص فوري للتأكد من نجاح عملية التحميل
    - name: ✅ Validate Repository Checkout
      run: |
        echo "🔍 فحص صحة تحميل المستودع..."
        
        # التحقق من وجود الملفات الأساسية
        critical_files=(
          "app/build.gradle"
          "app/src/main/AndroidManifest.xml"
        )
        
        checkout_success=true
        for file in "${critical_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ ملف حرج مفقود: $file"
            checkout_success=false
          fi
        done
        
        if [ "$checkout_success" = false ]; then
          echo "💥 خطأ حرج: فشل في تحميل المستودع بشكل صحيح"
          echo "🔧 الحل: تأكد من أن الملفات موجودة في المستودع"
          exit 1
        fi
        
        echo "✅ تم التحقق من صحة تحميل المستودع"

    - name: ☕ Setup JDK with Validation
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '17'

    # فحص فوري للتأكد من إعداد Java بشكل صحيح
    - name: ✅ Validate Java Setup
      run: |
        echo "🔍 فحص صحة إعداد Java..."
        
        if ! java -version 2>/dev/null; then
          echo "❌ Java غير مُعدّ بشكل صحيح"
          exit 1
        fi
        
        if [ -z "$JAVA_HOME" ]; then
          echo "❌ متغير JAVA_HOME غير محدد"
          exit 1
        fi
        
        java_version=$(java -version 2>&1 | head -1 | cut -d'"' -f2)
        if [[ ! "$java_version" =~ ^17\. ]]; then
          echo "❌ نسخة Java غير صحيحة: $java_version (المطلوب: 17.x)"
          exit 1
        fi
        
        echo "✅ Java معدّ بشكل صحيح - النسخة: $java_version"

    # ═══════════════════════════════════════════════════════════════
    # المرحلة الثانية: فحص شامل للمشروع مع معايير صارمة
    # ═══════════════════════════════════════════════════════════════
    
    - name: 🔍 Comprehensive Project Health Check
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "🏥 فحص صحة المشروع الشامل"
        echo "════════════════════════════════════════════════════════"
        
        project_health=true
        
        # فحص بنية المشروع الأساسية
        echo "📂 فحص بنية المشروع:"
        required_structure=(
          "app/"
          "app/src/"
          "app/src/main/"
          "app/src/main/java/"
          "app/src/main/res/"
          "app/src/main/res/layout/"
        )
        
        for dir in "${required_structure[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "❌ مجلد مطلوب مفقود: $dir"
            project_health=false
          else
            echo "✅ $dir موجود"
          fi
        done
        
        # فحص الملفات الحرجة
        echo ""
        echo "📄 فحص الملفات الحرجة:"
        critical_files=(
          "app/build.gradle"
          "app/src/main/AndroidManifest.xml"
          "app/src/main/res/layout/activity_main.xml"
          "gradle.properties"
          "settings.gradle"
        )
        
        for file in "${critical_files[@]}"; do
          if [ -f "$file" ]; then
            file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            if [ "$file_size" -gt 0 ]; then
              echo "✅ $file موجود وغير فارغ ($file_size بايت)"
            else
              echo "❌ $file فارغ!"
              project_health=false
            fi
          else
            echo "❌ $file غير موجود!"
            project_health=false
          fi
        done
        
        # فحص Gradle Wrapper الحالي
        echo ""
        echo "⚙️ فحص Gradle Wrapper الحالي:"
        wrapper_health=true
        
        if [ ! -f "gradlew" ]; then
          echo "⚠️ gradlew غير موجود - سيتم إنشاؤه"
          wrapper_health=false
        else
          if [ ! -x "gradlew" ]; then
            echo "⚠️ gradlew غير قابل للتنفيذ - سيتم إصلاحه"
            wrapper_health=false
          fi
        fi
        
        if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
          echo "⚠️ gradle-wrapper.properties غير موجود - سيتم إنشاؤه"
          wrapper_health=false
        fi
        
        if [ "$wrapper_health" = true ]; then
          echo "✅ Gradle Wrapper في حالة جيدة"
        fi
        
        # تقييم الصحة العامة للمشروع
        if [ "$project_health" = false ]; then
          echo ""
          echo "💥 خطأ حرج: المشروع يحتوي على مشاكل بنيوية أساسية"
          echo "🔧 الحل: تأكد من أن جميع الملفات والمجلدات المطلوبة موجودة"
          exit 1
        fi
        
        echo ""
        echo "✅ فحص صحة المشروع مكتمل بنجاح"

    # ═══════════════════════════════════════════════════════════════
    # المرحلة الثالثة: تحليل XML مع إصلاح مضمون
    # ═══════════════════════════════════════════════════════════════
    
    - name: 🔍 XML Analysis with Guaranteed Fix
      if: env.ENABLE_ADVANCED_DIAGNOSTICS == 'true'
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "🔬 تحليل XML مع إصلاح مضمون"
        echo "════════════════════════════════════════════════════════"
        
        layout_file="app/src/main/res/layout/activity_main.xml"
        backup_file="app/src/main/res/layout/activity_main.xml.backup"
        
        if [ ! -f "$layout_file" ]; then
          echo "❌ ملف activity_main.xml غير موجود!"
          exit 1
        fi
        
        # إنشاء نسخة احتياطية إجبارية
        cp "$layout_file" "$backup_file"
        echo "✅ تم إنشاء نسخة احتياطية"
        
        # فحص وإحصاء المشاكل
        echo ""
        echo "🔍 فحص المشاكل المعروفة:"
        
        problems_found=0
        
        # البحث عن expandedTitleEnabled
        if grep -q "expandedTitleEnabled" "$layout_file"; then
          echo "🚨 مشكلة 1: expandedTitleEnabled موجودة"
          problems_found=$((problems_found + 1))
        fi
        
        # البحث عن مشاكل أخرى محتملة
        problematic_attrs=(
          "expandedTitleGravity"
          "expandedTitleMargin"
          "expandedTitleTypeface"
          "collapsedTitleEnabled"
        )
        
        for attr in "${problematic_attrs[@]}"; do
          if grep -q "$attr" "$layout_file"; then
            echo "🚨 مشكلة محتملة: $attr موجودة"
            problems_found=$((problems_found + 1))
          fi
        done
        
        # تطبيق الإصلاحات
        if [ $problems_found -gt 0 ]; then
          echo ""
          echo "🔧 تطبيق الإصلاحات ($problems_found مشاكل معثور عليها):"
          
          # إصلاح expandedTitleEnabled
          if grep -q "expandedTitleEnabled" "$layout_file"; then
            sed -i 's/.*expandedTitleEnabled.*/        <!-- FIXED AUTO: expandedTitleEnabled not supported -->/' "$layout_file"
            echo "✅ تم إصلاح expandedTitleEnabled"
          fi
          
          # إصلاح المشاكل الأخرى
          for attr in "${problematic_attrs[@]}"; do
            if grep -q "$attr" "$layout_file"; then
              sed -i "s/.*$attr.*/        <!-- FIXED AUTO: $attr not supported -->/" "$layout_file"
              echo "✅ تم إصلاح $attr"
            fi
          done
          
          # التحقق من نجاح الإصلاح
          remaining_problems=0
          for attr in "expandedTitleEnabled" "${problematic_attrs[@]}"; do
            if grep -q "$attr" "$layout_file" && ! grep -q "<!-- FIXED AUTO:" "$layout_file"; then
              remaining_problems=$((remaining_problems + 1))
            fi
          done
          
          if [ $remaining_problems -gt 0 ]; then
            echo "❌ فشل في إصلاح بعض المشاكل"
            exit 1
          fi
          
          echo "✅ تم إصلاح جميع المشاكل المعروفة بنجاح"
        else
          echo "✅ لم يتم العثور على مشاكل معروفة"
        fi

    # ═══════════════════════════════════════════════════════════════
    # المرحلة الرابعة: إعداد Gradle مع فحص مضمون للنتيجة
    # ═══════════════════════════════════════════════════════════════
    
    - name: ⚙️ Gradle Environment Setup with Validation
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "⚙️ إعداد بيئة Gradle مع التحقق"
        echo "════════════════════════════════════════════════════════"
        
        # إعداد متغيرات البيئة
        echo "GRADLE_USER_HOME=$GITHUB_WORKSPACE/.gradle" >> $GITHUB_ENV
        mkdir -p "$GITHUB_WORKSPACE/.gradle"
        
        # التحقق من إنشاء المجلد
        if [ ! -d "$GITHUB_WORKSPACE/.gradle" ]; then
          echo "❌ فشل في إنشاء مجلد .gradle"
          exit 1
        fi
        
        # تنظيف cache محتمل التلف
        rm -rf ~/.gradle/caches/jars-9 2>/dev/null || true
        rm -rf "$GITHUB_WORKSPACE/.gradle/caches/jars-9" 2>/dev/null || true
        
        echo "✅ تم إعداد بيئة Gradle بنجاح"

    - name: 📥 Bulletproof Gradle Download
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "📥 تحميل Gradle المقاوم للأخطاء"
        echo "════════════════════════════════════════════════════════"
        
        gradle_url="https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-bin.zip"
        gradle_zip="gradle-$GRADLE_VERSION-bin.zip"
        
        # دالة تحميل محسنة مع فحص صارم
        download_and_validate() {
          local attempt=1
          local max_attempts=3
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 محاولة $attempt من $max_attempts"
            
            # حذف أي ملف سابق تالف
            rm -f "$gradle_zip"
            
            # التحميل مع timeout
            if timeout 300 wget --progress=dot:giga --retry-connrefused --read-timeout=30 "$gradle_url" -O "$gradle_zip"; then
              # فحص صارم للملف المحمل
              if [ -f "$gradle_zip" ] && [ -s "$gradle_zip" ]; then
                file_size=$(stat -c%s "$gradle_zip" 2>/dev/null || stat -f%z "$gradle_zip")
                # Gradle binary عادة أكبر من 100MB
                if [ "$file_size" -gt 104857600 ]; then
                  echo "✅ تم تحميل Gradle بنجاح ($file_size بايت)"
                  
                  # فحص إضافي - محاولة فحص نوع الملف
                  if file "$gradle_zip" | grep -q "Zip archive"; then
                    echo "✅ الملف المحمل هو أرشيف zip صالح"
                    return 0
                  else
                    echo "❌ الملف المحمل ليس أرشيف zip صالح"
                  fi
                else
                  echo "❌ حجم الملف صغير جداً ($file_size بايت) - ملف تالف"
                fi
              else
                echo "❌ الملف المحمل غير موجود أو فارغ"
              fi
            else
              echo "❌ فشل في التحميل (timeout أو خطأ شبكة)"
            fi
            
            echo "⏳ انتظار 10 ثوان قبل إعادة المحاولة..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          return 1
        }
        
        if download_and_validate; then
          echo "🎉 تحميل Gradle مكتمل ومتحقق منه"
        else
          echo "💥 خطأ حرج: فشل في تحميل Gradle بعد 3 محاولات"
          echo "🔧 الحل: تحقق من اتصال الإنترنت أو جرب لاحقاً"
          exit 1
        fi

    - name: 📦 Bulletproof Gradle Extraction
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "📦 فك ضغط Gradle المقاوم للأخطاء"
        echo "════════════════════════════════════════════════════════"
        
        gradle_zip="gradle-$GRADLE_VERSION-bin.zip"
        gradle_dir="gradle-$GRADLE_VERSION"
        
        # التحقق من وجود ملف الضغط
        if [ ! -f "$gradle_zip" ]; then
          echo "❌ ملف gradle zip غير موجود!"
          exit 1
        fi
        
        # فك الضغط مع معالجة الأخطاء
        echo "📂 فك ضغط $gradle_zip..."
        if unzip -q "$gradle_zip"; then
          echo "✅ تم فك الضغط"
          
          # التحقق الصارم من النتيجة
          if [ ! -d "$gradle_dir" ]; then
            echo "❌ مجلد gradle غير موجود بعد فك الضغط!"
            exit 1
          fi
          
          if [ ! -f "$gradle_dir/bin/gradle" ]; then
            echo "❌ ملف gradle التنفيذي غير موجود!"
            exit 1
          fi
          
          # ضبط الصلاحيات وفحصها
          chmod +x "$gradle_dir/bin/gradle"
          if [ ! -x "$gradle_dir/bin/gradle" ]; then
            echo "❌ فشل في ضبط صلاحيات gradle"
            exit 1
          fi
          
          # اختبار تشغيل Gradle
          echo ""
          echo "🧪 اختبار Gradle:"
          if timeout 60 ./$gradle_dir/bin/gradle --version; then
            echo "✅ Gradle يعمل بشكل مثالي!"
          else
            echo "❌ Gradle لا يعمل بشكل صحيح"
            exit 1
          fi
          
        else
          echo "❌ فشل في فك الضغط"
          exit 1
        fi
        
        # تنظيف ملف الضغط
        rm -f "$gradle_zip"
        echo "✅ تم تنظيف ملف الضغط"

    # ═══════════════════════════════════════════════════════════════
    # المرحلة الخامسة: إنشاء Wrapper مع فحص مضمون
    # ═══════════════════════════════════════════════════════════════
    
    - name: 🔧 Bulletproof Wrapper Generation
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "🔧 إنشاء Gradle Wrapper المقاوم للأخطاء"
        echo "════════════════════════════════════════════════════════"
        
        gradle_dir="gradle-$GRADLE_VERSION"
        
        # التحقق من وجود gradle قبل البدء
        if [ ! -x "$gradle_dir/bin/gradle" ]; then
          echo "❌ Gradle غير متوفر أو غير قابل للتنفيذ"
          exit 1
        fi
        
        # إنشاء wrapper مع timeout
        echo "⚡ إنشاء Gradle Wrapper..."
        if timeout 180 ./$gradle_dir/bin/gradle wrapper \
          --gradle-version "$GRADLE_VERSION" \
          --distribution-type all \
          --gradle-distribution-url "https://services.gradle.org/distributions/gradle-$GRADLE_VERSION-all.zip"; then
          
          echo "✅ أكتملت عملية إنشاء الـ wrapper"
          
          # فحص صارم للملفات المُنشأة
          echo ""
          echo "🔍 فحص صارم للملفات المُنشأة:"
          
          required_files=(
            "gradlew"
            "gradlew.bat"
            "gradle/wrapper/gradle-wrapper.jar"
            "gradle/wrapper/gradle-wrapper.properties"
          )
          
          wrapper_success=true
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ $file غير موجود!"
              wrapper_success=false
            else
              file_size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              if [ "$file_size" -eq 0 ]; then
                echo "❌ $file فارغ!"
                wrapper_success=false
              else
                echo "✅ $file موجود وصالح ($file_size بايت)"
              fi
            fi
          done
          
          if [ "$wrapper_success" = false ]; then
            echo "💥 خطأ حرج: فشل في إنشاء wrapper files صالحة"
            exit 1
          fi
          
          # ضبط صلاحيات gradlew وفحصها
          chmod +x gradlew
          if [ ! -x "gradlew" ]; then
            echo "❌ فشل في ضبط صلاحيات gradlew"
            exit 1
          fi
          
          # اختبار Gradle Wrapper
          echo ""
          echo "🧪 اختبار Gradle Wrapper:"
          if timeout 120 ./gradlew --version; then
            echo "✅ Gradle Wrapper يعمل بشكل مثالي!"
          else
            echo "❌ Gradle Wrapper لا يعمل"
            exit 1
          fi
          
        else
          echo "❌ فشل في إنشاء Gradle Wrapper (timeout أو خطأ)"
          exit 1
        fi
        
        # تنظيف مجلد gradle المؤقت
        rm -rf "$gradle_dir"
        echo "✅ تم تنظيف ملفات Gradle المؤقتة"

    # ═══════════════════════════════════════════════════════════════
    # المرحلة السادسة: البناء مع فحص مضمون للنتيجة
    # ═══════════════════════════════════════════════════════════════
    
    - name: 🏗️ Bulletproof Build with Result Verification
      env:
        JITPACK_TOKEN: ${{ secrets.JITPACK_TOKEN }}
      run: |
        echo "════════════════════════════════════════════════════════"
        echo "🏗️ بناء مقاوم للأخطاء مع فحص النتيجة"
        echo "════════════════════════════════════════════════════════"
        
        # إعداد متغيرات البناء المحسنة
        export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true -Dorg.gradle.caching=true"
        export JAVA_OPTS="-Xmx4g -XX:MaxMetaspaceSize=512m"
        
        echo "⚙️ متغيرات البيئة:"
        echo "GRADLE_OPTS: $GRADLE_OPTS"
        echo "JAVA_OPTS: $JAVA_OPTS"
        echo ""
        
        # التحقق من صحة gradlew قبل البدء
        if [ ! -x "gradlew" ]; then
          echo "❌ gradlew غير قابل للتنفيذ"
          exit 1
        fi
        
        # بدء البناء مع timeout وتسجيل مفصل
        echo "🚀 بدء عملية البناء..."
        build_start_time=$(date +%s)
        
        # تشغيل البناء مع معالجة شاملة للأخطاء
        build_exit_code=0
        timeout 1200 ./gradlew assembleDebug \
          --stacktrace \
          --info \
          --warning-mode all \
          --build-cache \
          --gradle-user-home="$GRADLE_USER_HOME" \
          2>&1 | tee detailed_build.log || build_exit_code=$?
        
        build_end_time=$(date +%s)
        build_duration=$((build_end_time - build_start_time))
        
        echo ""
        echo "⏱️ مدة البناء: ${build_duration} ثانية"
        
        # فحص صارم لنتيجة البناء
        echo ""
        echo "🔍 فحص صارم لنتيجة البناء:"
        
        # فحص exit code
        if [ $build_exit_code -ne 0 ]; then
          echo "❌ البناء فشل برمز الخطأ: $build_exit_code"
          
          # تحليل سريع للخطأ
          if [ -f "detailed_build.log" ]; then
            echo ""
            echo "🔍 تحليل سريع للخطأ:"
            if grep -q "BUILD FAILED" detailed_build.log; then
              echo "🚨 البناء فشل بوضوح (BUILD FAILED موجود في السجل)"
            fi
            
            if grep -q -i "timeout" detailed_build.log; then
              echo "🚨 البناء انتهت مهلته الزمنية"
            fi
            
            echo ""
            echo "📋 آخر 20 سطر من سجل البناء:"
            tail -20 detailed_build.log
          fi
          
          exit 1
        fi
        
        # فحص وجود BUILD SUCCESSFUL في السجل
        if ! grep -q "BUILD SUCCESSFUL" detailed_build.log 2>/dev/null; then
          echo "❌ لم يتم العثور على 'BUILD SUCCESSFUL' في سجل البناء"
          exit 1
        fi
        
        # فحص وجود ملف APK
        apk_path="app/build/outputs/apk/debug/app-debug.apk"
        if [ ! -f "$apk_path" ]; then
          echo "❌ ملف APK غير موجود في المسار المتوقع: $apk_path"
          
          # البحث عن ملفات APK في أي مكان
          echo "🔍 البحث عن ملفات APK في كامل المشروع:"
          find . -name "*.apk" -type f 2>/dev/null || echo "لا توجد ملفات APK في أي مكان!"
          
          exit 1
        fi
        
        # فحص صحة ملف APK
        apk_size=$(stat -c%s "$apk_path" 2>/dev/null || stat -f%z "$apk_path")
        if [ "$apk_size" -lt 1024 ]; then  # أقل من 1KB
          echo "❌ ملف APK صغير جداً ($apk_size بايت) - على الأرجح تالف"
          exit 1
        fi
        
        # فحص إضافي - محاولة فحص نوع الملف
        if ! file "$apk_path" | grep -q -i "zip\|archive"; then
          echo "❌ ملف APK لا يبدو كأرشيف صالح"
          exit 1
        fi
        
        # إذا وص
